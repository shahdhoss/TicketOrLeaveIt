services:
  api-gateway-1:
    build: ./api-gateway
    environment:
      REDIS_HOST: redis
  api-gateway-2:
    build: ./api-gateway
    environment:
      REDIS_HOST: redis     

  load-balancer:
    image: haproxy:2.8
    ports:
      - "80:80"
      - "8404:8404"  
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - api-gateway-1
      - api-gateway-2
      - payment-service
      - user-service
      - vendor-service
      - organizers-service
      - events-service
      - payment-db
      - user-db
      - vendor-db
      - organizer-db
      - events-db
      - redis

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "8085:8081"
    environment:
      DB_HOST: payment-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_NAME: payment-db
      NODE_ENV: development
      PAYMOB_API_KEY: "ZXlKaGJHY2lPaUpJVXpVeE1pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmpiR0Z6Y3lJNklrMWxjbU5vWVc1MElpd2ljSEp2Wm1sc1pWOXdheUk2TVRBek9ERTFOQ3dpYm1GdFpTSTZJakUzTkRRNE16VTVOVGd1TmpFeU5EQTJJbjAuSkl3X2xsRmlRRmFMVWd5UTd1cXlhSHRFVndaVkV3dTBjTmNISW91LUZYQkRMRkRPTGpidTdiQVE5dGxMajE2V21MVHRKcTR5YmNReDF3ZEJMRVI4a3c="
      PAYMOB_INTEGRATION_ID: "5056686"
      PAYMOB_IFRAME_ID: "914522"
    depends_on:
      - payment-db

  payment-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: payment-db
    volumes:
      - payment_pgdata:/var/lib/postgresql/data

  user-service:
    build:
      context: ./users-service
      dockerfile: dockerfile
    ports:
      - "8081:8080"
    environment:
      DB_HOST: user-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: users
    depends_on:
      - user-db

  user-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - users_pgdata:/var/lib/postgresql/data
  
  vendor-service:
    build:
      context: ./vendor-service
      dockerfile: dockerfile
    ports:
      - "8082:8080"
      - "50051:50051"
    environment:
      DB_HOST: vendor-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: vendor
    depends_on:
      - vendor-db

  vendor-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vendor
    volumes:
      - vendor_pgdata:/var/lib/postgresql/data
  
  organizers-service:
    build:
      context: ./organizers-service
      dockerfile: dockerfile
    ports:
      - "8083:8080"
    environment:
      DB_HOST: organizer-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: organizers
    depends_on:
      - organizer-db

  organizer-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: organizers
    volumes:
      - organizers_pgdata:/var/lib/postgresql/data
  
  events-service:
    build:
      context: ./events-service
      dockerfile: dockerfile
    ports:
      - "8084:8080"
    environment:
      DB_HOST: events-db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: events
    depends_on:
      - events-db
      - vendor-service

  events-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: events
    volumes:
      - events_pgdata:/var/lib/postgresql/data
  
  auth-service:
    build: 
      context: ./Auth
      dockerfile: dockerfile
    ports:
      - "8086:8000"
    env_file: ./Auth/.env
    environment:
    - REDIRECT_URI=http://localhost/auth/google/callback
    - NODE_ENV=development
    
    depends_on:
      - auth-db

  auth-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: tickets
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false 
      - xpack.security.transport.ssl.enabled=false 
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

volumes:
  users_pgdata:
  vendor_pgdata:
  organizers_pgdata:
  redis_data:
  events_pgdata:
  payment_pgdata:
  auth_pgdata:
  elasticsearch-data: