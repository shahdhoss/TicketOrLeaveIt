openapi: 3.0.0
info:
  title: Organizer API
  version: 1.0.0
  description: The application is divided into microservice, for each microservice there is a RESTful API created, this is the organizer API

servers: 
  - url: http://localhost:8080/v1

paths:
  /organizer:
    post:
      summary: Adds a new organizer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_name:
                  type: string
                  example: "Cairo's organization for concerts"
                industry_type:
                  type: string
                  example: "Concerts"
                primary_contact_name:
                  type: string
                  example: "Shahd Hosam"
                email:
                  type: string
                  format: email
                  example: "shahd@gmail.com"
                password:
                  type: string
                  format: password
                  example: "detectiveConan"
                username:
                  type: string
                  example: "shahdhoss"
      responses:
        '201':
          description: Organizer created successfully
  
  /organizer/{id}:  
    patch:
      summary: Modifies the info of an existing organizer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the organizer to modify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_name:
                  type: string
                  example: "Cairo's organization for concerts"
                industry_type:
                  type: string
                  example: "Concerts"
                primary_contact_name:
                  type: string
                  example: "Shahd Hosam"
                email:
                  type: string
                  format: email
                  example: "shahd@gmail.com"
                password:
                  type: string
                  format: password
                  example: "detectiveConan"
                username:
                  type: string
                  example: "shahdhoss"
      responses:
        '201':
          description: Organizer modified successfully
  /organizer/payment_info:
    post:
      summary: Add payment details for an organizer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organizer_id:
                  type: string
                  example: "org_12345"
                credit_card_number:
                  type: integer
                  example: 
                expiration_date:
                  type: string
                  format: date
                  example:
                payment_methods:
                  type: array
                  items:
                    type: string
                  example: ["Credit Card", "Cash"]
                currency:
                  type: string
                  example: "EGP"
      responses:
        '201':
          description: Payment info added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Payment details added successfully."
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid bank account number format."
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "An unexpected error occurred."

  /event:
    get:
      summary: Get all Events created by an organizer
      responses:
        '200':
          description: Gets a list of dictionaries of all events created by the organizer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Add a new event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully

  /event/{id}:
    get:
      summary: Get an event by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the event to retrieve
      responses:
        '200':
          description: Gets an event using event id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      summary: Delete an event by id
      responses:
        '204':
          description: Event deleted successfully
        '404':
          description: Event not found
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Deletes an event using event id


    patch:
      summary: Partially update an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the event to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '204':
          description: Event updated successfully
        '404':
          description: Event not found


  /event/{id}/capacity:
    get:
      summary: Get the remaining capacity of an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the event to retrieve
      responses:
        '200':
          description: Gets an event using event id
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: '#/components/schemas/EventCapacity'

components:
  schemas:
    Event:
      type: object
      properties:
        event_type:
          type: string
          example: "Concert"
        event_location:
          type: string
          example: "Arena"
        event_address:
          type: string
          example: "ElSawy Culture Wheel"
        artist:
          type: string
          example: "Helena Hauff"
        description:
          type: string
          example: "Expect pulsating beats, minimal lighting, and a stripped-back industrial setting that will transport you straight to the roots of Berlin’s legendary rave culture."
        dates:
          type: array
          items:
            type: string
            format: date-time
            example: "2025-07-10T19:30:00Z"
        city_location:
          type: string
          example: "Cairo"
        capacity:
          type: integer
          example: 200
        ticket_types:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: "VIP"
              price:
                type: number
                format: float
                example: 500.00
        images:
          type: array
          items:
            type: string
            format: uri
            example: "https://example.com/event-image.jpg"

    EventUpdate:
      type: object
      properties:
        price:
          type: integer
          example: 250
    EventCapacity:
      type: object
      properties:
        capacity:
          type: integer
          example: 100
    EventHistory :
      type: object
      properties:
        type:
          type: string
          example: "Concert"
        artist:
          type: string
          example: "Helena Hauff"
        description:
          type: string
          example: "Expect pulsating beats, minimal lighting, and a stripped-back industrial setting that will transport you straight to the roots of Berlin’s legendary rave culture."
        dates:
          type: array
          items:
            type: string
            format: date-time
        location:
          type: string
          example: "Cairo"
        capacity:
          type: integer
          example: 200
        price:
          type: integer
          example: 500
 