// routers/ticket.routes.js
const express = require('express');
const router = express.Router();

// --- Import the Controller ---
// === ACTION REQUIRED ===
// 1. Look in your project for a folder named 'controllers' (or similar).
// 2. Find the JavaScript file inside it (e.g., DefaultController.js, TicketsController.js).
// 3. Update the path in the require() statement below to match exactly.
// === ACTION REQUIRED ===
const TicketController = require('../controllers/DefaultController'); // <-- ADJUST PATH/FILENAME AS NEEDED

// --- Define Routes based on your tickets.yml ---
// The function names (e.g., reserveEventById) should ideally match the 'operationId'
// from your tickets.yml, or the names generated by the OpenAPI tool.
// === ACTION REQUIRED ===
// 1. Look inside the controller file you identified above.
// 2. Verify that the exported function names match the ones used below (e.g., does it export 'reserveEventById'?).
// 3. If the names are different, update them here to match the controller file exactly.
// === ACTION REQUIRED ===

// == Reservation Routes ==
// POST /reserve/:id
router.post('/reserve/:id', TicketController.reserveEventById);

// PATCH /reserve/:id
// Check operationId in spec: 'Update a user's event reservation' -> might generate 'updateUsersEventReservation' or similar
router.patch('/reserve/:id', TicketController.updateEventReservation); // <-- Verify this function name in the controller file

// DELETE /reserve/:id
// Check operationId in spec: 'Delete an event reservation of a user by reservation id'
router.delete('/reserve/:id', TicketController.deleteEventReservationOfAUserByReservationId); // <-- Verify this function name

// == History Route ==
// GET /history
// Check operationId in spec: 'Get the event history of a user'
router.get('/history', TicketController.getTheEventHistoryOfAUser); // <-- Verify this function name

// == Hold Routes ==
// POST /hold/:id
// Check operationId in spec: 'Hold a ticket or a number of tickets using reservation id'
router.post('/hold/:id', TicketController.holdATicketOrANumberOfTicketsUsingReservationId); // <-- Verify this function name

// PATCH /hold/:id
// Check operationId in spec: 'Update a user's ticket holding'
router.patch('/hold/:id', TicketController.updateAUserSTicketHolding); // <-- Verify this function name

// DELETE /hold/:id
// Check operationId in spec: 'Delete the holding of a ticket after it being fully reserved'
router.delete('/hold/:id', TicketController.deleteTheHoldingOfATicketAfterItBeingFullyReserved); // <-- Verify this function name


// --- Export the router ---
module.exports = router;