openapi: 3.0.0
info:
  description: "The application is divided into microservice, for each microservice\
    \ there is a RESTful API created, this is the ticket service API"
  title: Ticket Service API
  version: 1.0.0
servers:
- url: http://localhost:8080/v1
paths:
  /reserve/{id}:
    delete:
      operationId: reserveIdDELETE
      parameters:
      - description: Deletes an event reservation using reservation id
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Event deleted successfully
        "404":
          description: Event not found
      summary: Delete an event reservation of a user by reservation id
      x-eov-operation-handler: controllers/DefaultController
    patch:
      operationId: reserveIdPATCH
      parameters:
      - description: ID of the reservation to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_reserve__id__patch_request'
        required: true
      responses:
        "200":
          description: Reservation updated successfully
        "404":
          description: Reservation not found
        "500":
          description: Internal server error
      summary: Update a user's event reservation
      x-eov-operation-handler: controllers/DefaultController
    post:
      operationId: reserveIdPOST
      parameters:
      - description: ID of the event to reserve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_reserve__id__post_request'
        required: true
      responses:
        "201":
          description: Reservation done successfully
        "500":
          description: Reservation failed
        "404":
          description: Event not found
      summary: Reserve an event by event id
      x-eov-operation-handler: controllers/DefaultController
  /history:
    get:
      operationId: historyGET
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventHistory'
                type: array
          description: Gets all events using user id
      summary: Get the event history of a user
      x-eov-operation-handler: controllers/DefaultController
  /hold/{id}:
    delete:
      operationId: holdIdDELETE
      parameters:
      - description: Deletes an event reservation using reservation id
        example: 500
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Event deleted successfully
        "404":
          description: Event not found
      summary: Delete the holding of a ticket after it being fully reserved
      x-eov-operation-handler: controllers/DefaultController
    patch:
      operationId: holdIdPATCH
      parameters:
      - description: ID of the reservation to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_reserve__id__patch_request'
        required: true
      responses:
        "200":
          description: Reservation updated successfully
        "404":
          description: Reservation not found
        "500":
          description: Internal server error
      summary: Update a user's ticket holding
      x-eov-operation-handler: controllers/DefaultController
    post:
      operationId: holdIdPOST
      parameters:
      - description: ID of the event to reserve
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_reserve__id__post_request'
        required: true
      responses:
        "201":
          description: Reservation done successfully
        "500":
          description: Reservation failed
        "404":
          description: Event not found
      summary: Hold a ticket or a number of tickets using reservation id
      x-eov-operation-handler: controllers/DefaultController
components:
  schemas:
    EventHistory:
      example:
        date: 2000-01-23T04:56:07.000+00:00
        artist: Helena Hauff
        price: 500
        description: "Expect pulsating beats, minimal lighting, and a stripped-back\
          \ industrial setting that will transport you straight to the roots of Berlin’\
          s legendary rave culture."
        location: Cairo
        type: Concert
        capacity: 200
      properties:
        type:
          example: Concert
          type: string
        artist:
          example: Helena Hauff
          type: string
        description:
          example: "Expect pulsating beats, minimal lighting, and a stripped-back\
            \ industrial setting that will transport you straight to the roots of\
            \ Berlin’s legendary rave culture."
          type: string
        date:
          format: date-time
          type: string
        location:
          example: Cairo
          type: string
        capacity:
          example: 200
          type: integer
        price:
          example: 500
          type: integer
      type: object
    _reserve__id__post_request:
      properties:
        quantity:
          description: The number of tickets to be booked
          type: integer
        seat_type:
          description: Type of seat for the reservation
          enum:
          - VIP
          - Front Row
          - Balcony
          - General Admission
          type: string
        seat_number:
          description: Seat number of the reservations
          type: string
      required:
      - quantity
      - seat_number
      - seat_type
      type: object
    _reserve__id__patch_request:
      properties:
        quantity:
          description: Updated number of tickets
          type: integer
        seat_type:
          description: Updated seat type
          enum:
          - VIP
          - Front Row
          - Balcony
          - General Admission
          type: string
        seat_number:
          description: Updated seat number
          type: string
      required:
      - quantity
      type: object
